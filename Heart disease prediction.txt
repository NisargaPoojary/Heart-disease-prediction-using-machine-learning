import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('Heart_Disease_Prediction.csv')
data

data.head()

data.shape

data.columns

data.info()

data.tail()

data.describe()

data.drop_duplicates(inplace=True)

data.shape

data.isna().sum()

data['Heart Disease'].value_counts()

data['Heart Disease'].unique()


from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

x = data.drop(columns=['Heart Disease'])
y = data['Heart Disease']

x.shape
y
y.shape

x_train , x_test , y_train , y_test = train_test_split(x , y , test_size=0.25 , random_state=1)

x_train.shape

x_test.shape

y_train.shape

y_test.shape

#Random Forest

from sklearn.ensemble import RandomForestClassifier
clf2 = RandomForestClassifier()
RFC = clf2.fit(x_train , y_train)
y_pred = clf2.predict(x_test)
RandomForestClassif = metrics.accuracy_score(y_test,y_pred)
RandomForestClassif

# Import Libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tkinter import Tk, Label, Entry, Button, messagebox
import warnings 
warnings.filterwarnings('ignore')

# Giving the path of data set

data=pd.read_csv('Heart_Disease_Prediction.csv')

# Display the contents

data

# Display first few columns of the dataset

data.head()

# Display number of rows and columns

data.shape

# Display dataset column to identify its characteristics

data.columns

# Information of the dataframe such as index type, dtype, columns, non-null count , and memory usage

data.info()

# Display the last few rows of dataset

data.tail()

# Gives a quick overview of the dataset


data.describe()

# Remove duplicate values to ensure faster processing of dataset

data.drop_duplicates(inplace=True)

data.shape

# Check if any columns in the dataset contains null values

data.isna().sum()

# Count the unique values in the column labeled 'Heart Disease'

data['Heart Disease'].value_counts()

# Find all of the unique values in the Heart Disease column

data['Heart Disease'].unique()

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

# Prepare the data for training a machine learning model

x = data.drop(columns=['Heart Disease'])
y = data['Heart Disease']

# Determine the dimensions of the feature matrix 'x'

x.shape

y

# Determine the dimensions of the target variable 'y'

y.shape

# Split a dataset into training and testing sets

x_train , x_test , y_train , y_test = train_test_split(x , y , test_size=0.25 , random_state=0)

# Determine the dimensions of the training set 'x_train'

x_train.shape

# Determine the dimensions of the test set 'x_test'

x_test.shape

# Determine the dimensions of the training set 'y_train'

y_train.shape

# Determine the dimensions of the test set 'y_test'

y_test.shape

#  Train a Random Forest Classifier

from sklearn.ensemble import RandomForestClassifier

clf2 = RandomForestClassifier()

RFC = clf2.fit(x_train , y_train) #Train the Random Forest Classifier

y_pred = clf2.predict(x_test) #Make Predictions on the Test Set

RandomForestClassif = metrics.accuracy_score(y_test,y_pred) #Evaluate the Performance using Accuracy

RandomForestClassif

import tkinter as tk
from tkinter import messagebox
from sklearn.ensemble import RandomForestClassifier

# Load the trained Random Forest classifier
clf = RandomForestClassifier()

#Define the Prediction Function
def predict_heart_disease():
    clf.fit(x_train, y_train)
    # Get user input
    age = int(age_entry.get())
    sex = sex_entry.get()
    valid_sex = ['0', '1']
    if sex not in valid_sex :
        messagebox.showerror("Error", "Invalid value for sex. Please select either Male or Female.")
        return
    chest_pain_type = chest_pain_type_entry.get()
    valid_chest_pain_types = ['1', '2', '3', '4']
    if chest_pain_type not in valid_chest_pain_types:
        messagebox.showerror("Error", "Invalid Chest Pain Type. Please enter a valid value (1, 2, 3, or 4).")
        return
    blood_pressure = int(blood_pressure_entry.get())
    cholesterol = int(cholesterol_entry.get())
    fasting_blood_sugar = int(fasting_blood_sugar_entry.get())
    valid_fasting_blood_sugar = [1, 0]    
    if fasting_blood_sugar not in valid_fasting_blood_sugar:
        messagebox.showerror("Error", "Invalid value for fasting blood sugar. Please select either >120 or <=120.")
        return
    ecg_result = ecg_result_entry.get()
    valid_ecg_results = ['0','2']
    if ecg_result not in valid_ecg_results:
        messagebox.showerror("Error", "Invalid value for ECG result. Please select either 0 or 2.")
        return
    max_heart_rate = int(max_heart_rate_entry.get())
    exercise_induced_angina = exercise_induced_angina_entry.get()
    valid_exercise_induced_angina_values = ['0','1']
    if exercise_induced_angina not in valid_exercise_induced_angina_values:
        messagebox.showerror("Error", "Invalid value for Exercise Induced Angina. Please select either 0 or 1.")
        return
    st_depression = float(st_depression_entry.get())
    slope_of_st = slope_of_st_entry.get()
    valid_slope_of_st = ['0','1','2','3']
    if slope_of_st not in valid_slope_of_st:
        messagebox.showerror("Error", "Invalid value for Slope of ST. Please select either 0, 1 , 2 ,or 3.")
        return
    num_vessels = int(num_vessels_entry.get())
    valid_num_vessels = ['0', '1', '2', '3']
    if str(num_vessels) not in valid_num_vessels:
        messagebox.showerror("Error", "Invalid value for Number of vessels fluro. Please select either 0, 1, 2, or 3.")
        return
    thallium = thallium_entry.get()
    valid_thallium_values = ["3", "6", "7"]
    if thallium not in valid_thallium_values:
        messagebox.showerror("Error", "Invalid value for Thallium. Please select either 3, 6, or 7.")
        return
    
    input_data = np.array([age, sex, chest_pain_type, blood_pressure, cholesterol, fasting_blood_sugar, ecg_result, max_heart_rate, exercise_induced_angina, st_depression, slope_of_st, num_vessels, thallium])

    prediction = clf.predict(input_data.reshape(1, -1))

    # Display prediction result
    if prediction[0] == 'Presence':
        messagebox.showinfo("Heart Disease Prediction", "The person has been diagnosed with heart disease.")
    else:
        messagebox.showinfo("Heart Disease Prediction", "The person is in perfect health.")

# Create the tkinter window
root = tk.Tk()
root.title("Heart Disease Prediction")
root.geometry("800x350")
default_font = ("Arial", 10)

# Create labels and entry fields for user input
age_label = tk.Label(root, text="Age:",font=default_font)
age_entry = tk.Entry(root)

sex_label = tk.Label(root, text="Sex (1 for Male, 0 for Female):",font=default_font)
sex_entry = tk.Entry(root)

chest_pain_type_label = tk.Label(root, text="Chest Pain Type (1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic):",font=default_font)
chest_pain_type_entry = tk.Entry(root)

blood_pressure_label = tk.Label(root, text="Blood Pressure:",font=default_font)
blood_pressure_entry = tk.Entry(root)

cholesterol_label = tk.Label(root, text="Cholesterol:",font=default_font)
cholesterol_entry = tk.Entry(root)

fasting_blood_sugar_label = tk.Label(root, text="Fasting Blood Sugar (1 for >120, 0 for <=120):",font=default_font)
fasting_blood_sugar_entry = tk.Entry(root)

ecg_result_label = tk.Label(root, text="ECG Result (0 for Normal, 2 for Abnormal):",font=default_font)
ecg_result_entry = tk.Entry(root)

max_heart_rate_label = tk.Label(root, text="Maximum Heart Rate Achieved:",font=default_font)
max_heart_rate_entry = tk.Entry(root)

exercise_induced_angina_label = tk.Label(root, text="Exercise Induced Angina (1 for yes, 0 for no):",font=default_font)
exercise_induced_angina_entry = tk.Entry(root)

st_depression_label = tk.Label(root, text="ST Depression:",font=default_font)
st_depression_entry = tk.Entry(root)

slope_of_st_label = tk.Label(root, text="Slope of ST (0: Upsloping ,1: Flat ,2: Downsloping ,3: Not specified or another category):",font=default_font)
slope_of_st_entry = tk.Entry(root)

num_vessels_label = tk.Label(root, text="Number of vessels fluro (0: No vessels colored, 1: One vessel colored ,2: Two vessels colored ,3: Three vessels colored):",font=default_font)
num_vessels_entry = tk.Entry(root)

thallium_label = tk.Label(root, text="Thallium (3=Normal, 6=Fixed Defect, 7=Reversible Defect):",font=default_font)
thallium_entry = tk.Entry(root)

# Create a button to trigger the prediction
predict_button = tk.Button(root, text="Predict", command=predict_heart_disease,font=default_font)
age_label.grid(row=0, column=0,sticky=tk.E)
age_entry.grid(row=0, column=1)

sex_label.grid(row=1, column=0,sticky=tk.E)
sex_entry.grid(row=1, column=1)

chest_pain_type_label.grid(row=2, column=0,sticky=tk.E)
chest_pain_type_entry.grid(row=2, column=1)

blood_pressure_label.grid(row=3, column=0,sticky=tk.E)
blood_pressure_entry.grid(row=3, column=1)

cholesterol_label.grid(row=4, column=0,sticky=tk.E)
cholesterol_entry.grid(row=4, column=1)

fasting_blood_sugar_label.grid(row=5, column=0,sticky=tk.E)
fasting_blood_sugar_entry.grid(row=5, column=1)

ecg_result_label.grid(row=6, column=0,sticky=tk.E)
ecg_result_entry.grid(row=6, column=1)

max_heart_rate_label.grid(row=7, column=0,sticky=tk.E)
max_heart_rate_entry.grid(row=7, column=1)

exercise_induced_angina_label.grid(row=8, column=0,sticky=tk.E)
exercise_induced_angina_entry.grid(row=8, column=1)

st_depression_label.grid(row=9, column=0,sticky=tk.E)
st_depression_entry.grid(row=9, column=1)

slope_of_st_label.grid(row=10, column=0,sticky=tk.E)
slope_of_st_entry.grid(row=10, column=1)

num_vessels_label.grid(row=11, column=0,sticky=tk.E)
num_vessels_entry.grid(row=11, column=1)

thallium_label.grid(row=12, column=0,sticky=tk.E)
thallium_entry.grid(row=12, column=1)

# Add the predict button
predict_button.grid(row=13, column=0, columnspan=2)

#Start the Tkinter Main Loop
root.mainloop()



